---
number-sections: false
---

# Preface {.unnumbered}


```{=html}
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10.2.3/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>
```


```{r}
#| echo: false

## ----------------------------------------------------------------
## SET UP THE ENVIRONMENT

suppressPackageStartupMessages({
  library("jsonlite")
  library("htmltools")
})

source("R/dcf_status_diagram_copied 08.25.2025.R")




## ----------------------------------------------------------------
## PULL IN THE CURRENT REPORT JSON FILE

# URL of the gzipped JSON file
url <- "https://raw.githubusercontent.com/PopHIVE/Ingest/main/report.json.gz"

# Generate a temporary file path for the gzipped JSON file
temp_file <- tempfile(fileext = ".json.gz")

# Use tryCatch to handle potential errors during download and processing
tryCatch({
    # Download the file to the temporary file path
    download.file(url, temp_file)
    
    # Decompress and read the gzip file content
    con <- gzfile(temp_file, "rb")
    decompressed_content <- readLines(con)
    close(con)
    
    # Parse the JSON content
    data <- fromJSON(paste(decompressed_content, collapse = "\n"))
    
    # Save the decompressed and parsed JSON content back to a gzip file named report.json.gz
    report_file <- "R/report.json.gz"
    gz_con <- gzfile(report_file, "w")
    writeLines(toJSON(data, auto_unbox = TRUE, pretty = TRUE), gz_con)
    close(gz_con)
    
    # Call dcf_status_diagram with necessary arguments
    dcf_status_diagram(project_dir = "R/", out_file = "status.md")
    
    # Clean up by deleting the temporary file
    unlink(temp_file)
}, error = function(e) {
    cat("An error occurred:", conditionMessage(e), "\n")
    # Clean up in case of error
    if (file.exists(temp_file)) {
        unlink(temp_file)
    }
    if (file.exists(report_file)) {
        unlink(report_file)
    }
})




## ----------------------------------------------------------------
## PULL IN THE FORMATTED MERMAID DIAGRAM FROM THE JSON FILE

# Read the content of status.md file
status_md <- readLines("R/status.md")

# Identify Mermaid code block boundaries
mermaid_start <- grep("```mermaid", status_md)
mermaid_end <- grep("```", status_md, fixed = TRUE) 
mermaid_end <- mermaid_end[mermaid_end > mermaid_start][1]

# Extract Mermaid code block
mermaid_code <- status_md[(mermaid_start + 1):(mermaid_end - 1)]

# Save the Mermaid code as a variable
mermaid_code_content <- paste(mermaid_code, collapse = "\n")

save(mermaid_code_content, file = "R/mermaid_code.RData")

```


```{r, results='asis', echo=FALSE}
cat(sprintf("```{mermaid}\n%s\n```", mermaid_code_content))
```




